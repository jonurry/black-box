{"version":3,"sources":["../../js/model.js","../../js/utility.js","../../js/vector.js","../../js/view.js","../../js/controller.js","../../js/app.js"],"names":["root","util","getRandomIntInclusive","min","max","Math","ceil","floor","random","define","amd","exports","module","blackBoxUtil","BLACKBOX","utility","this","undefined","Vector","row","column","direction","VECTOR","DIRECTION","NONE","position","parseInt","UP","rowIncrement","columnIncrement","DOWN","LEFT","RIGHT","prototype","move","rowInc","columnInc","Number","isInteger","e","setPosition","vectorModule","require","utilModule","checkForDeflectedRay","ray","marbles","gridSize","probe1","probe2","gridUpperBound","DIR","result","DEFLECTION","some","marble","REVERSED","DEFLECTED","createGrid","grid","length","initialiseGrid","fill","placeMarbleOnGrid","numberOfMarbles","push","placeMarblesRandomlyOnGrid","i","rayAlreadyShot","rayHasHitMarble","rayHasRechedRim","currentRow","currentColumn","rayIsInCorner","rayIsInsideGrid","rayIsOutsideGrid","BlackBox","arguments","newGame","gameHasFinished","guesses","numberOfRays","turns","SHOOT_RAY_OUTCOME","ABSORBED","CORNER","DUPLICATE","INSIDE","MARBLE_MAX","MARBLE_PLACED","MARBLE_REMOVED","NOTHING","OUTSIDE","PROPOGATED","REFLECTED","allMarblesPlaced","guess","newGuess","guessRow","guessColumn","removeGuess","splice","scoreGame","numberMissingGuesses","score","forEach","toString","shootRay","outcome","path","rayNumber","originalRay","deflectionOutcome","originalRow","originalColumn","upperGridBound","JSON","parse","stringify","BlackBoxModel","process","env","NODE_ENV","_private","Model","animateAllRays","draw","supportsInlineSvg","begin","durations","paths","svg","document","getElementById","toArray","querySelectorAll","map","getTotalLength","style","strokeDasharray","strokeDashoffset","visibility","pow","getBoundingClientRect","transition","WebkitTransition","intervalID","setTimeout","createSVGPath","shot","pathCount","startVector","currentVector","nextVector","cellWidth","radius","col","join","renderSVGPath","svgPath","cssClass","visible","OUTCOME","svgElement","pathElement","svgRay","getElementsByTagName","createElement","setAttribute","innerHTML","search","outerHTML","replace","remove","resizeSVG","blackboxDiv","left","margin","top","width","value","offsetWidth","offsetTop","offsetLeft","cssText","arr","Array","slice","call","View","view","validationHandlers","bind","div","firstChild","namespaceURI","documentElement","className","event","handler","buttonNewGame","buttonScoreGame","clickedElement","animateRays","addEventListener","display","target","nodeName","dataset","pos","split","window","renderAndAnimateAllRays","allShots","querySelector","clearTimeout","renderGridConsole","gridLine","console","log","j","String","renderGrid","cellDiv","classes","appendChild","disabled","renderShot","endElement","endPos","startElement","startPos","inputGridSize","inputMarbles","currentTarget","isNaN","BlackBoxView","shootAllRays","self","model","BlackBoxController","onClickAnimateRays","onClickNewGame","onClickScoreGame","onClickShootRay","renderViews","gridCopy","guessesCopy","marblesCopy","Controller"],"mappings":"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","file":"app.js","sourcesContent":["// dependencies\n// Node.js import modules\nif (typeof exports === \"object\") {\n  if (this.BLACKBOX === undefined) {\n    this.BLACKBOX = {};\n  }\n  if (this.BLACKBOX.VECTOR === undefined) {\n    var vectorModule = require(\"../js/vector.js\");\n    this.BLACKBOX.VECTOR = vectorModule.VECTOR;\n  }\n  if (this.BLACKBOX.utility === undefined) {\n    var utilModule = require(\"../js/utility.js\");\n    this.BLACKBOX.utility = utilModule.blackBoxUtil;\n  }\n}\n\n(function(root, BLACKBOX) {\n  \"use strict\";\n\n  // define black box constants\n  const SHOOT_RAY_OUTCOME = {\n    ABSORBED: \"ray hit marble and was absorbed\",\n    CORNER: \"ray is in a corner\",\n    DUPLICATE: \"ray has already been shot\",\n    INSIDE: \"ray is inside the black box\",\n    MARBLE_MAX: \"marble ignored - maximum number already placed\",\n    MARBLE_PLACED: \"marble has been placed\",\n    MARBLE_REMOVED: \"marble has been removed\",\n    NOTHING: \"no outcome\",\n    OUTSIDE: \"ray is outside of the black box\",\n    PROPOGATED: \"ray has reached the rim\",\n    REFLECTED: \"ray has been reflected\"\n  };\n\n  const DEFLECTION = {\n    DEFLECTED: \"ray has been deflected\",\n    NONE: \"ray has not been deflected\",\n    REVERSED: \"ray has been reversed\"\n  };\n\n  // private properties\n  //\n\n  // private methods\n  function checkForDeflectedRay(ray, marbles, gridSize) {\n    var probe1 = false;\n    var probe2 = false;\n    var row = ray.position.row + ray.direction.rowIncrement;\n    var column = ray.position.column + ray.direction.columnIncrement;\n    var gridUpperBound = gridSize + 1;\n    var DIR = BLACKBOX.VECTOR.DIRECTION;\n    var result;\n\n    if (\n      row === 0 ||\n      row === gridUpperBound ||\n      column === 0 ||\n      column === gridUpperBound\n    ) {\n      result = DEFLECTION.NONE;\n    } else if (ray.direction === DIR.UP || ray.direction === DIR.DOWN) {\n      probe1 = marbles.some(\n        marble => marble.row === row && marble.column === column + 1\n      );\n      probe2 = marbles.some(\n        marble => marble.row === row && marble.column === column - 1\n      );\n      if (probe1 && probe2) {\n        //two adjacent marbles so ray is reversed\n        ray.direction = ray.direction === DIR.UP ? DIR.DOWN : DIR.UP;\n        result = DEFLECTION.REVERSED;\n      } else if (probe1) {\n        // one adjacent marble so head LEFT\n        ray.direction = DIR.LEFT;\n        result = DEFLECTION.DEFLECTED;\n      } else if (probe2) {\n        // one adjacent marble so head RIGHT\n        ray.direction = DIR.RIGHT;\n        result = DEFLECTION.DEFLECTED;\n      } else {\n        result = DEFLECTION.NONE;\n      }\n    } else {\n      //ray is travelling LEFT or RIGHT\n      // ignore case where first propogated ray is encoutered at edge\n      probe1 = marbles.some(\n        marble => marble.row === row + 1 && marble.column === column\n      );\n      probe2 = marbles.some(\n        marble => marble.row === row - 1 && marble.column === column\n      );\n      if (probe1 && probe2) {\n        //two adjacent marbles so ray is reversed\n        ray.direction = ray.direction === DIR.LEFT ? DIR.RIGHT : DIR.LEFT;\n        result = DEFLECTION.REVERSED;\n      } else if (probe1) {\n        // one adjacent marble so head UP\n        ray.direction = DIR.UP;\n        result = DEFLECTION.DEFLECTED;\n      } else if (probe2) {\n        // one adjacent marble so head DOWN\n        ray.direction = DIR.DOWN;\n        result = DEFLECTION.DEFLECTED;\n      } else {\n        result = DEFLECTION.NONE;\n      }\n    }\n\n    return result;\n  }\n\n  function createGrid(grid, gridSize) {\n    // reset empty array without creating a new array\n    grid.length = 0;\n    //first row. 2 extra slots to record ray outcomes at either end\n    for (var row = 0; row < gridSize + 2; row++) {\n      grid[row] = [];\n      grid[row].length = gridSize + 2;\n    }\n  }\n\n  function initialiseGrid(grid, gridSize) {\n    for (var row = 0; row < gridSize + 2; row++) {\n      grid[row].fill(0);\n    }\n  }\n\n  function placeMarbleOnGrid(row, column, numberOfMarbles, marbles) {\n    // place marble according to row and column position\n    // if marble already placed then ignore request\n    // if max number of marbles would be exceeded then don't place marble\n    var position = {};\n    position.row = row;\n    position.column = column;\n    if (marbles.length < numberOfMarbles) {\n      if (\n        !marbles.some(\n          marble =>\n            marble.row === position.row && marble.column === position.column\n        )\n      ) {\n        marbles.push(position);\n      }\n    }\n  }\n\n  function placeMarblesRandomlyOnGrid(gridSize, numberOfMarbles, marbles) {\n    var position;\n    for (var i = 0; i < numberOfMarbles; i++) {\n      position = {};\n      do {\n        position.row = BLACKBOX.utility.getRandomIntInclusive(1, gridSize);\n        position.column = BLACKBOX.utility.getRandomIntInclusive(1, gridSize);\n      } while (\n        marbles.some(\n          marble =>\n            marble.row === position.row && marble.column === position.column\n        )\n      );\n      marbles.push(position);\n    }\n  }\n\n  function rayAlreadyShot(ray, grid) {\n    // check if ray has already been shot from current location (i.e. duplicate)\n    return grid[ray.position.row][ray.position.column] !== 0;\n  }\n\n  function rayHasHitMarble(ray, marbles) {\n    // check if ray will hit a marble on next move\n    var position = {};\n    position.row = ray.position.row + ray.direction.rowIncrement;\n    position.column = ray.position.column + ray.direction.columnIncrement;\n    return marbles.some(\n      marble => marble.row === position.row && marble.column === position.column\n    );\n  }\n\n  function rayHasRechedRim(ray, gridSize) {\n    var currentRow = ray.position.row;\n    var currentColumn = ray.position.column;\n    var gridUpperBound = gridSize + 1;\n    // check if ray has reached the rim\n    return (\n      currentRow === 0 ||\n      currentRow === gridUpperBound ||\n      currentColumn === 0 ||\n      currentColumn === gridUpperBound\n    );\n  }\n\n  function rayIsInCorner(ray, gridSize) {\n    var currentRow = ray.position.row;\n    var currentColumn = ray.position.column;\n    var gridUpperBound = gridSize + 1;\n    // check if ray is in a corner\n    return (\n      (currentRow === 0 && currentColumn === 0) ||\n      (currentRow === 0 && currentColumn === gridUpperBound) ||\n      (currentRow === gridUpperBound && currentColumn === 0) ||\n      (currentRow === gridUpperBound && currentColumn === gridUpperBound)\n    );\n  }\n\n  function rayIsInsideGrid(ray, gridSize) {\n    var currentRow = ray.position.row;\n    var currentColumn = ray.position.column;\n    var gridUpperBound = gridSize + 1;\n    return (\n      currentRow > 0 &&\n      currentColumn > 0 &&\n      currentRow < gridUpperBound &&\n      currentColumn < gridUpperBound\n    );\n  }\n\n  function rayIsOutsideGrid(ray, gridSize) {\n    var currentRow = ray.position.row;\n    var currentColumn = ray.position.column;\n    var gridUpperBound = gridSize + 1;\n    return (\n      currentRow < 0 ||\n      currentColumn < 0 ||\n      currentRow > gridUpperBound ||\n      currentColumn > gridUpperBound\n    );\n  }\n\n  // public API - constructor\n  function BlackBox(gridSize = 8, numberOfMarbles = 4, newGame = false) {\n    this.gameHasFinished = false;\n    this.grid = [];\n    this.gridSize = gridSize;\n    this.guesses = [];\n    this.marbles = [];\n    this.numberOfMarbles = numberOfMarbles;\n    this.numberOfRays = 0;\n    this.turns = [];\n\n    if (newGame) {\n      this.newGame(this.gridSize, this.numberOfMarbles);\n    }\n  }\n\n  // public API - prototype methods\n\n  BlackBox.prototype.allMarblesPlaced = function() {\n    return this.guesses.length === this.numberOfMarbles;\n  };\n\n  BlackBox.prototype.guess = function(newGuess) {\n    var guessRow = newGuess.position.row;\n    var guessColumn = newGuess.position.column;\n    var removeGuess = -1;\n    for (var i = 0, guess; (guess = this.guesses[i]); i++) {\n      if (guess.row === guessRow && guess.column === guessColumn) {\n        // that guess has already been made so remove guess\n        removeGuess = i;\n      }\n    }\n    if (removeGuess > -1) {\n      this.guesses.splice(removeGuess, 1);\n      return SHOOT_RAY_OUTCOME.MARBLE_REMOVED;\n    } else if (this.guesses.length < this.numberOfMarbles) {\n      this.guesses.push(newGuess.position);\n      return SHOOT_RAY_OUTCOME.MARBLE_PLACED;\n    } else {\n      return SHOOT_RAY_OUTCOME.MARBLE_MAX;\n    }\n  };\n\n  BlackBox.prototype.newGame = function(gridSize = 8, numberOfMarbles = 4) {\n    this.gameHasFinished = false;\n    this.grid = [];\n    this.gridSize = gridSize;\n    this.guesses = [];\n    this.marbles = [];\n    this.numberOfMarbles = numberOfMarbles;\n    this.numberOfRays = 0;\n    this.turns = [];\n    createGrid(this.grid, this.gridSize);\n    initialiseGrid(this.grid, this.gridSize);\n    placeMarblesRandomlyOnGrid(\n      this.gridSize,\n      this.numberOfMarbles,\n      this.marbles\n    );\n  };\n\n  BlackBox.prototype.scoreGame = function() {\n    // 1 point for each entry and exit location\n    // 5 points for each guess in the wrong location\n    // incomplete games will not be scored\n    var numberMissingGuesses;\n    var score;\n    if (this.allMarblesPlaced()) {\n      score = 0;\n      // Add up the ray scores\n      for (var i = 1; i <= this.gridSize; i++) {\n        if (this.grid[0][i] !== 0) {\n          score++;\n        }\n        if (this.grid[this.gridSize + 1][i] !== 0) {\n          score++;\n        }\n        if (this.grid[i][0] !== 0) {\n          score++;\n        }\n        if (this.grid[i][this.gridSize + 1] !== 0) {\n          score++;\n        }\n      }\n      // process the guesses\n      this.guesses.forEach(function(guess) {\n        if (\n          this.marbles.some(\n            marble => marble.row === guess.row && marble.column === guess.column\n          )\n        ) {\n          this.grid[guess.row][guess.column] = \"y\";\n        } else {\n          score += 5;\n          this.grid[guess.row][guess.column] = \"n\";\n        }\n      }, this);\n      // cycle through grid and mark any marbles that were not found\n      for (var row = 1; row <= this.gridSize; row++) {\n        for (var column = 1; column <= this.gridSize; column++) {\n          if (this.grid[row][column] === 1) {\n            this.grid[row][column] = \"x\";\n          }\n        }\n      }\n      this.gameHasFinished = true;\n    } else {\n      numberMissingGuesses = this.numberOfMarbles - this.guesses.length;\n      score =\n        \"Make \" +\n        numberMissingGuesses.toString() +\n        \" more guess\" +\n        (numberMissingGuesses === 1 ? \"\" : \"es\") +\n        \" to get a score\";\n      this.gameHasFinished = false;\n    }\n    return score;\n  };\n\n  BlackBox.prototype.shootRay = function(ray) {\n    // retrns an object that gives the overall outcome\n    // and the path that the ray took\n    // {\n    //  outcome: SHOOT_RAY_OUTCOME,\n    //  path: array of Vectors,\n    //  rayNumber: the number of the ray\n    // }\n\n    var result = {\n      outcome: SHOOT_RAY_OUTCOME.NOTHING,\n      path: [],\n      rayNumber: 0\n    };\n\n    var originalRay;\n    var deflectionOutcome = DEFLECTION.NONE;\n    var originalRow = ray.position.row;\n    var originalColumn = ray.position.column;\n    var grid = this.grid;\n    var gridSize = this.gridSize;\n    var upperGridBound = gridSize + 1;\n    var marbles = this.marbles;\n    var gameHasFinished = this.gameHasFinished;\n    var DIR = BLACKBOX.VECTOR.DIRECTION;\n\n    // determine ray direction if not specified\n    if (ray.direction === DIR.NONE) {\n      if (ray.position.row === 0) {\n        ray.direction = DIR.DOWN;\n      } else if (ray.position.row === upperGridBound) {\n        ray.direction = DIR.UP;\n      } else if (ray.position.column === 0) {\n        ray.direction = DIR.RIGHT;\n      } else if (ray.position.column === upperGridBound) {\n        ray.direction = DIR.LEFT;\n      }\n    }\n\n    result.path.push(JSON.parse(JSON.stringify(ray)));\n\n    if (rayIsOutsideGrid(ray, gridSize)) {\n      result.outcome = SHOOT_RAY_OUTCOME.OUTSIDE;\n    } else if (rayIsInCorner(ray, gridSize)) {\n      result.outcome = SHOOT_RAY_OUTCOME.CORNER;\n    } else if (rayIsInsideGrid(ray, gridSize)) {\n      if (!this.gameHasFinished) {\n        result.outcome = this.guess(ray);\n      } else {\n        result.outcome = SHOOT_RAY_OUTCOME.INSIDE;\n      }\n    } else if (rayAlreadyShot(ray, grid) && !this.gameHasFinished) {\n      result.outcome = SHOOT_RAY_OUTCOME.DUPLICATE;\n    } else {\n      // shoot the ray\n      do {\n        if (rayHasHitMarble(ray, marbles)) {\n          if (!this.gameHasFinished) {\n            grid[originalRow][originalColumn] = \"a\";\n          }\n          result.path.push(JSON.parse(JSON.stringify(ray)));\n          result.outcome = SHOOT_RAY_OUTCOME.ABSORBED;\n        } else {\n          originalRay = JSON.stringify(ray);\n          deflectionOutcome = checkForDeflectedRay(ray, marbles, gridSize);\n          if (deflectionOutcome !== DEFLECTION.NONE) {\n            if (result.path.length === 1) {\n              if (!this.gameHasFinished) {\n                grid[originalRow][originalColumn] = \"r\";\n              }\n              result.outcome = SHOOT_RAY_OUTCOME.REFLECTED;\n            } else if (deflectionOutcome === DEFLECTION.REVERSED) {\n              // DONE: Path is not fully traced when reflected (missing a step) id:4 gh:5\n              result.path.push(JSON.parse(originalRay));\n              result.path.push(JSON.parse(JSON.stringify(ray)));\n            }\n          }\n        }\n        if (result.outcome === SHOOT_RAY_OUTCOME.NOTHING) {\n          ray.move();\n          result.path.push(JSON.parse(JSON.stringify(ray)));\n          if (rayHasRechedRim(ray, gridSize)) {\n            if (\n              ray.position.row === originalRow &&\n              ray.position.column === originalColumn\n            ) {\n              if (!this.gameHasFinished) {\n                grid[originalRow][originalColumn] = \"r\";\n              }\n              result.outcome = SHOOT_RAY_OUTCOME.REFLECTED;\n            } else {\n              if (!this.gameHasFinished) {\n                this.numberOfRays++;\n                grid[ray.position.row][ray.position.column] = this.numberOfRays;\n                grid[originalRow][originalColumn] = this.numberOfRays;\n              }\n              result.outcome = SHOOT_RAY_OUTCOME.PROPOGATED;\n            }\n          }\n        }\n      } while (result.outcome === SHOOT_RAY_OUTCOME.NOTHING);\n    }\n\n    if (gameHasFinished) {\n      result.rayNumber = grid[originalRow][originalColumn];\n    } else {\n      result.rayNumber = this.numberOfRays;\n      if (\n        result.outcome === SHOOT_RAY_OUTCOME.ABSORBED ||\n        result.outcome === SHOOT_RAY_OUTCOME.REFLECTED ||\n        result.outcome === SHOOT_RAY_OUTCOME.PROPOGATED\n      ) {\n        this.turns.push(result);\n      }\n    }\n\n    return result;\n  };\n\n  // Export to root (window in browser)\n  if (typeof define === \"function\" && define.amd) {\n    // requireJS\n    //define(VECTOR);\n  } else if (typeof exports === \"object\") {\n    // Node.js\n    module.exports.SHOOT_RAY_OUTCOME = SHOOT_RAY_OUTCOME;\n    module.exports.BlackBoxModel = BlackBox;\n    if (process.env.NODE_ENV === \"test\") {\n      module.exports.BlackBoxModel._private = {\n        checkForDeflectedRay: checkForDeflectedRay,\n        createGrid: createGrid,\n        initialiseGrid: initialiseGrid,\n        placeMarbleOnGrid: placeMarbleOnGrid,\n        placeMarblesRandomlyOnGrid: placeMarblesRandomlyOnGrid,\n        rayAlreadyShot: rayAlreadyShot,\n        rayHasHitMarble: rayHasHitMarble,\n        rayHasRechedRim: rayHasRechedRim,\n        rayIsInCorner: rayIsInCorner,\n        rayIsInsideGrid: rayIsInsideGrid,\n        rayIsOutsideGrid: rayIsOutsideGrid\n      };\n    }\n  } else {\n    // in the browser\n    root = root || {};\n    root.BLACKBOX = root.BLACKBOX || {};\n    root.BLACKBOX.SHOOT_RAY_OUTCOME = SHOOT_RAY_OUTCOME;\n    root.BLACKBOX.Model = BlackBox;\n  }\n})(this, this.BLACKBOX);\n","!(function(root) {\n  \"use strict\";\n\n  var util = {\n    getRandomIntInclusive: function(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\n    }\n  };\n\n  // Export to root (window in browser)\n  if (typeof define === \"function\" && define.amd) {\n    // requireJS\n    // define(VECTOR);\n    // define(Vector);\n  } else if (typeof exports === \"object\") {\n    // Node.js\n    module.exports.blackBoxUtil = util;\n  } else {\n    // in the browser\n    root = root || {};\n    root.BLACKBOX = root.BLACKBOX || {};\n    root.BLACKBOX.utility = util;\n  }\n})(this);\n","!(function(root, undefined) {\n  \"use strict\";\n\n  // define vector constants\n  const VECTOR = {};\n  VECTOR.DIRECTION = {\n    UP: { rowIncrement: -1, columnIncrement: 0 },\n    DOWN: { rowIncrement: 1, columnIncrement: 0 },\n    LEFT: { rowIncrement: 0, columnIncrement: -1 },\n    RIGHT: { rowIncrement: 0, columnIncrement: 1 },\n    NONE: { rowIncrement: 0, columnIncrement: 0 }\n  };\n\n  function Vector(row, column, direction) {\n    if (direction !== undefined) {\n      this.direction = direction;\n    } else {\n      this.direction = VECTOR.DIRECTION.NONE;\n    }\n    this.position = { row: parseInt(row, 10), column: parseInt(column, 10) };\n  }\n\n  Vector.prototype.move = function() {\n    try {\n      var rowInc = this.direction.rowIncrement;\n      var columnInc = this.direction.columnIncrement;\n      if (\n        Number.isInteger(rowInc) &&\n        Number.isInteger(columnInc) &&\n        rowInc >= -1 &&\n        rowInc <= 1 &&\n        columnInc >= -1 &&\n        columnInc <= 1\n      ) {\n        this.position.row += rowInc;\n        this.position.column += columnInc;\n      }\n    } catch (e) {\n      throw \"The vector direction was not a valid direction.\";\n    }\n  };\n\n  Vector.prototype.setPosition = function(row, column) {\n    this.position.row = row;\n    this.position.column = column;\n  };\n\n  // Export to root (window in browser)\n  if (typeof define === \"function\" && define.amd) {\n    // requireJS\n    // define(VECTOR);\n    // define(Vector);\n  } else if (typeof exports === \"object\") {\n    // Node.js\n    module.exports.VECTOR = VECTOR;\n    module.exports.Vector = Vector;\n  } else {\n    // in the browser\n    root = root || {};\n    root.BLACKBOX = root.BLACKBOX || {};\n    root.BLACKBOX.VECTOR = VECTOR;\n    root.BLACKBOX.Vector = Vector;\n  }\n})(this);\n","!(function(root, BLACKBOX, undefined) {\n  \"use strict\";\n\n  var intervalID;\n\n  // the following code is adapted from Jake Archibald's article on animating SVG paths\n  // https://jakearchibald.com/2013/animated-line-drawing-svg/\n  // begin: SVG Animate\n  var supportsInlineSvg = (function() {\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"<svg/>\";\n    return (\n      (div.firstChild && div.firstChild.namespaceURI) ==\n      \"http://www.w3.org/2000/svg\"\n    );\n  })();\n  document.documentElement.className += supportsInlineSvg ? \" inline-svg\" : \"\";\n\n  function animateAllRays(draw) {\n    if (!supportsInlineSvg) return;\n\n    var begin;\n    var durations;\n    var paths;\n    var svg;\n\n    svg = document.getElementById(\"svg\");\n    if (svg !== null) {\n      paths = toArray(svg.querySelectorAll(\"path\"));\n      if (paths.length > 0) {\n        durations = paths.map(function(path) {\n          var length = path.getTotalLength();\n          path.style.strokeDasharray = length + \" \" + length;\n          path.style.strokeDashoffset = length;\n          path.style.visibility = \"visible\";\n          return Math.pow(length, 0.5) * 0.03;\n        });\n\n        // triggering a reflow so styles are calculated in their\n        // start position, so they animate from here\n        begin = 0;\n        paths[0].getBoundingClientRect();\n\n        if (draw) {\n          paths.forEach(function(path, i) {\n            path.style.transition = path.style.WebkitTransition =\n              \"stroke-dashoffset \" +\n              durations[i] +\n              \"s \" +\n              begin +\n              \"s ease-in-out\";\n            path.style.strokeDashoffset = \"0\";\n            begin += durations[i] + 0.1;\n          });\n        }\n      }\n    }\n    intervalID = setTimeout(animateAllRays, 10000, !draw);\n  }\n  // end: SVG Animate\n\n  function createSVGPath(shot, gridSize) {\n    var pathCount = shot.path.length;\n    var startVector;\n    var currentVector;\n    var nextVector;\n    var path = [];\n    var cellWidth;\n    var radius;\n    var row, col;\n\n    if (pathCount > 2) {\n      cellWidth = 100 / gridSize;\n      radius = cellWidth / 2;\n      startVector = shot.path[0];\n      row = startVector.position.row;\n      col = startVector.position.column;\n      // move to start position of ray (\"M x y\")\n      path.push(\"M\");\n      if (col === 0) {\n        path.push(0);\n      } else if (col === gridSize + 1) {\n        path.push(100);\n      } else {\n        path.push((col - 0.5) * cellWidth);\n      }\n      if (row === 0) {\n        path.push(0);\n      } else if (row === gridSize + 1) {\n        path.push(100);\n      } else {\n        path.push((row - 0.5) * cellWidth);\n      }\n      for (var i = 1; i < shot.path.length - 1; i++) {\n        currentVector = shot.path[i];\n        nextVector = shot.path[i + 1];\n        if (\n          currentVector.direction.rowIncrement === 1 &&\n          nextVector.direction.rowIncrement === 1\n        ) {\n          // ray moves down one cell relative to current position \"v 1-cell\"\n          path.push(\"v\");\n          path.push(cellWidth);\n        } else if (\n          currentVector.direction.rowIncrement === -1 &&\n          nextVector.direction.rowIncrement === -1\n        ) {\n          // ray moves up one cell relative to current position \"v -(1-cell)\"\n          path.push(\"v\");\n          path.push(-cellWidth);\n        } else if (\n          currentVector.direction.columnIncrement === 1 &&\n          nextVector.direction.columnIncrement === 1\n        ) {\n          // ray moves right one cell relative to current position \"h 1-cell\"\n          path.push(\"h\");\n          path.push(cellWidth);\n        } else if (\n          currentVector.direction.columnIncrement === -1 &&\n          nextVector.direction.columnIncrement === -1\n        ) {\n          // ray moves left one cell relative to current position \"h -(1-cell)\"\n          path.push(\"h\");\n          path.push(-cellWidth);\n        } else if (\n          currentVector.direction.columnIncrement === -1 &&\n          nextVector.direction.rowIncrement === 1\n        ) {\n          // ray deflected from travelling left to travelling down\n          // ray arcs anti-clockwise to left and down relative to current position\n          // \"a radius radius, 0 0 0, -radius radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(0);\n          path.push(-radius);\n          path.push(radius);\n        } else if (\n          currentVector.direction.rowIncrement === 1 &&\n          nextVector.direction.columnIncrement === 1\n        ) {\n          // ray deflected from travelling down to travelling right\n          // ray arcs anti-clockwise from down to right relative to current position\n          // \"a radius radius, 0 0 0, radius radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(0);\n          path.push(radius);\n          path.push(radius);\n        } else if (\n          currentVector.direction.columnIncrement === 1 &&\n          nextVector.direction.rowIncrement === -1\n        ) {\n          // ray deflected from travelling right to travelling up\n          // ray arcs anti-clockwise to right and up relative to current position\n          // \"a radius radius, 0 0 0, radius -radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(0);\n          path.push(radius);\n          path.push(-radius);\n        } else if (\n          currentVector.direction.rowIncrement === -1 &&\n          nextVector.direction.columnIncrement === -1\n        ) {\n          // ray deflected from travelling up to travelling left\n          // ray arcs anti-clockwise to left and up relative to current position\n          // \"a radius radius, 0 0 0, -radius -radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(0);\n          path.push(-radius);\n          path.push(-radius);\n        } else if (\n          currentVector.direction.columnIncrement === 1 &&\n          nextVector.direction.rowIncrement === 1\n        ) {\n          // ray deflected from travelling right to travelling down\n          // ray arcs clockwise to right and down relative to current position\n          // \"a radius radius, 0 0 1, radius radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(1);\n          path.push(radius);\n          path.push(radius);\n        } else if (\n          currentVector.direction.rowIncrement === 1 &&\n          nextVector.direction.columnIncrement === -1\n        ) {\n          // ray deflected from travelling down to travelling left\n          // ray arcs clockwise from down to left relative to current position\n          // \"a radius radius, 0 0 1, -radius radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(1);\n          path.push(-radius);\n          path.push(radius);\n        } else if (\n          currentVector.direction.columnIncrement === -1 &&\n          nextVector.direction.rowIncrement === -1\n        ) {\n          // ray deflected from travelling left to travelling up\n          // ray arcs clockwise to left and up relative to current position\n          // \"a radius radius, 0 0 1, -radius -radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(1);\n          path.push(-radius);\n          path.push(-radius);\n        } else if (\n          currentVector.direction.rowIncrement === -1 &&\n          nextVector.direction.columnIncrement === 1\n        ) {\n          // ray deflected from travelling up to travelling right\n          // ray arcs clockwise to right and up relative to current position\n          // \"a radius radius, 0 0 1, radius -radius\"\n          path.push(\"a\");\n          path.push(radius);\n          path.push(radius);\n          path.push(0);\n          path.push(0);\n          path.push(1);\n          path.push(radius);\n          path.push(-radius);\n        }\n      }\n    }\n\n    return path.join(\" \");\n  }\n\n  function renderSVGPath(svgPath, outcome, cssClass, visible = true) {\n    var OUTCOME = BLACKBOX.SHOOT_RAY_OUTCOME;\n    var svgElement;\n    var pathElement;\n    var svgRay;\n    svgElement = document.getElementsByTagName(\"svg\")[0];\n    pathElement = document.createElement(\"path\");\n    pathElement.setAttribute(\"d\", svgPath);\n    if (visible) {\n      pathElement.style.visibility = \"visible\";\n    } else {\n      pathElement.style.visibility = \"hidden\";\n    }\n    if (cssClass !== \"\") {\n      pathElement.setAttribute(\"class\", cssClass);\n    }\n    switch (outcome) {\n      case OUTCOME.ABSORBED:\n      case OUTCOME.REFLECTED:\n        if (svgElement.innerHTML.search(pathElement.outerHTML) === -1) {\n          svgElement.innerHTML += pathElement.outerHTML;\n        } else {\n          svgElement.innerHTML = svgElement.innerHTML.replace(\n            pathElement.outerHTML,\n            \"\"\n          );\n        }\n        break;\n      case OUTCOME.PROPOGATED:\n        svgRay = svgElement.querySelectorAll(\"path.\" + cssClass)[0];\n        if (svgRay === undefined) {\n          svgElement.innerHTML += pathElement.outerHTML;\n        } else {\n          svgRay.remove();\n        }\n        break;\n    }\n  }\n\n  function resizeSVG() {\n    var blackboxDiv;\n    var gridSize;\n    var left;\n    var margin;\n    var svg;\n    var top;\n    var width;\n\n    svg = document.getElementById(\"svg\");\n    if (svg !== null) {\n      // resize the svg element\n      blackboxDiv = document.getElementById(\"blackbox\");\n      gridSize = parseInt(document.getElementById(\"inputGridSize\").value);\n      margin = blackboxDiv.offsetWidth / (gridSize + 2);\n      width = blackboxDiv.offsetWidth - 2 * margin;\n      top = blackboxDiv.offsetTop + margin;\n      left = margin + blackboxDiv.offsetLeft;\n      svg.style.cssText =\n        \"width: \" + width + \"px; top: \" + top + \"px; left: \" + left + \"px;\";\n    }\n  }\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function View() {\n    this.view = this;\n    this.validationHandlers();\n    this.bind(\"resizeBlackBox\");\n  }\n\n  View.prototype.bind = function(event, handler) {\n    var blackboxDiv;\n    var buttonNewGame;\n    var buttonScoreGame;\n    var clickedElement;\n    var column;\n    var gridSize;\n    var numberOfMarbles;\n    var animateRays;\n    var row;\n    var score;\n\n    if (event === \"animateRays\") {\n      animateRays = document.getElementById(\"radioAnimateRaysYes\");\n      animateRays.addEventListener(\"change\", function() {\n        handler();\n      });\n      animateRays = document.getElementById(\"radioAnimateRaysNo\");\n      animateRays.addEventListener(\"change\", function() {\n        handler();\n      });\n    } else if (event === \"newGame\") {\n      buttonNewGame = document.getElementById(\"buttonNewGame\");\n      buttonNewGame.addEventListener(\"click\", function() {\n        gridSize = parseInt(document.getElementById(\"inputGridSize\").value);\n        numberOfMarbles = parseInt(\n          document.getElementById(\"inputMarbles\").value\n        );\n        handler(gridSize, numberOfMarbles);\n        document.getElementById(\"score\").style.display = \"none\";\n        document.getElementById(\"animateRays\").style.display = \"none\";\n      });\n    } else if (event === \"scoreGame\") {\n      buttonScoreGame = document.getElementById(\"buttonScoreGame\");\n      buttonScoreGame.addEventListener(\"click\", function() {\n        score = handler();\n        document.getElementById(\"scoreValue\").innerHTML = score;\n        document.getElementById(\"score\").style.display = \"block\";\n        document.getElementById(\"animateRays\").style.display = \"block\";\n      });\n    } else if (event === \"shootRay\") {\n      blackboxDiv = document.getElementById(\"blackbox\");\n      blackboxDiv.addEventListener(\"click\", function(event) {\n        clickedElement = event.target;\n        if (clickedElement.nodeName !== \"svg\") {\n          row = parseInt(clickedElement.dataset.pos.split(\",\")[0]);\n          column = parseInt(clickedElement.dataset.pos.split(\",\")[1]);\n          handler(new BLACKBOX.Vector(row, column));\n        }\n      });\n    } else if (event === \"resizeBlackBox\") {\n      window.addEventListener(\"resize\", resizeSVG);\n    }\n  };\n\n  View.prototype.renderAndAnimateAllRays = function(allShots, gridSize) {\n    var OUTCOME = BLACKBOX.SHOOT_RAY_OUTCOME;\n    var animateRays;\n    var paths;\n    var svg;\n    var svgPath;\n    animateRays =\n      document.querySelector('input[name=\"switch\"]:checked').value === \"on\"\n        ? true\n        : false;\n    if (animateRays) {\n      svg = document.getElementById(\"svg\");\n      if (svg !== null) {\n        paths = toArray(svg.querySelectorAll(\"path\"));\n        if (paths.length === 0) {\n          allShots.forEach(function(shot) {\n            var cssClass;\n            switch (shot.outcome) {\n              case OUTCOME.ABSORBED:\n                cssClass = \"hit\";\n                break;\n              case OUTCOME.MARBLE_PLACED:\n              case OUTCOME.MARBLE_REMOVED:\n                cssClass = \"guess\";\n                break;\n              case OUTCOME.PROPOGATED:\n                cssClass = \"ray-\" + shot.rayNumber;\n                break;\n              case OUTCOME.REFLECTED:\n                cssClass = \"reflect\";\n                break;\n            }\n            svgPath = createSVGPath(shot, gridSize);\n            if (svgPath.length > 0) {\n              renderSVGPath(svgPath, shot.outcome, cssClass, false);\n            }\n          });\n        }\n      }\n      animateAllRays(true);\n    } else {\n      clearTimeout(intervalID);\n    }\n    return animateRays;\n  };\n\n  View.prototype.renderGridConsole = function(grid) {\n    var gridLine;\n\n    console.log();\n    for (var i = 0; i < grid.length; i++) {\n      gridLine = \"\";\n      for (var j = 0; j < grid.length; j++) {\n        gridLine += String(grid[i][j]) + \"\\t\";\n      }\n      console.log(gridLine + \"\\t\" + String(i));\n    }\n  };\n\n  View.prototype.renderGrid = function(\n    grid,\n    gridSize,\n    gameHasFinished,\n    allMarblesPlaced,\n    guesses,\n    marbles\n  ) {\n    var blackboxDiv = document.getElementById(\"blackbox\");\n    var buttonScoreGame;\n    var cellDiv;\n    var classes;\n    var upperGridBound = gridSize + 1;\n\n    blackboxDiv.innerHTML = \"\";\n    blackboxDiv.className = \"blackbox grid grid-size-\" + gridSize;\n    for (var row = 0; row <= upperGridBound; row++) {\n      for (var column = 0; column <= upperGridBound; column++) {\n        cellDiv = document.createElement(\"div\");\n        classes = [\"cell\"];\n        // render ray outcomes\n        switch (grid[row][column]) {\n          case 0:\n            // no action required\n            break;\n          case \"a\":\n            classes.push(\"hit\");\n            break;\n          case \"n\":\n            classes.push(\"guess-wrong\");\n            break;\n          case \"r\":\n            classes.push(\"reflect\");\n            break;\n          case \"x\":\n            classes.push(\"not-found\");\n            break;\n          case \"y\":\n            classes.push(\"guess-right\");\n            break;\n          default:\n            if (\n              row === 0 ||\n              row === upperGridBound ||\n              column === 0 ||\n              column === upperGridBound\n            ) {\n              classes.push(\"ray-\" + grid[row][column]);\n            }\n        }\n        if (gameHasFinished) {\n          // render marbles\n          marbles.forEach(function(marble) {\n            if (\n              parseInt(marble.row) === row &&\n              parseInt(marble.column) === column\n            ) {\n              if (grid[row][column] === 0) {\n                classes.push(\"guess\");\n              }\n            }\n          });\n        }\n        // set row and column data\n        cellDiv.dataset.pos = row + \",\" + column;\n        cellDiv.className = classes.join(\" \");\n        blackboxDiv.appendChild(cellDiv);\n      }\n    }\n    if (gameHasFinished) {\n      // overlay the inner grid with an SVG element so that we can draw\n      // the ray's path on top of the grid.\n      blackboxDiv.innerHTML += '<svg id=\"svg\" viewBox=\"0 0 100 100\"></svg>';\n      window.setTimeout(resizeSVG, 0);\n    }\n    // enable/disable score game button\n    buttonScoreGame = document.getElementById(\"buttonScoreGame\");\n    buttonScoreGame.disabled = !(allMarblesPlaced && !gameHasFinished);\n  };\n\n  View.prototype.renderShot = function(\n    shot,\n    gridSize,\n    gameHasFinished,\n    allMarblesPlaced\n  ) {\n    var OUTCOME = BLACKBOX.SHOOT_RAY_OUTCOME;\n    var buttonScoreGame;\n    var cssClass = \"\";\n    var endElement;\n    var endPos;\n    var startElement;\n    var startPos;\n    var svgPath;\n\n    startPos = shot.path[0].position.row + \",\" + shot.path[0].position.column;\n    endPos =\n      shot.path[shot.path.length - 1].position.row +\n      \",\" +\n      shot.path[shot.path.length - 1].position.column;\n    startElement = document.querySelectorAll(\n      \"[data-pos='\" + startPos + \"']\"\n    )[0];\n    endElement = document.querySelectorAll(\"[data-pos='\" + endPos + \"']\")[0];\n    buttonScoreGame = document.getElementById(\"buttonScoreGame\");\n\n    switch (shot.outcome) {\n      case OUTCOME.ABSORBED:\n        cssClass = \"hit\";\n        break;\n      case OUTCOME.MARBLE_PLACED:\n      case OUTCOME.MARBLE_REMOVED:\n        cssClass = \"guess\";\n        break;\n      case OUTCOME.PROPOGATED:\n        cssClass = \"ray-\" + shot.rayNumber;\n        break;\n      case OUTCOME.REFLECTED:\n        cssClass = \"reflect\";\n        break;\n    }\n\n    // if gameHasFinished then trace path of ray\n    if (gameHasFinished) {\n      svgPath = createSVGPath(shot, gridSize);\n      if (svgPath.length > 0) {\n        renderSVGPath(svgPath, shot.outcome, cssClass);\n      }\n    } else {\n      // game has not finished\n      cssClass = \" \" + cssClass;\n      switch (shot.outcome) {\n        case OUTCOME.ABSORBED:\n        case OUTCOME.MARBLE_PLACED:\n        case OUTCOME.PROPOGATED:\n        case OUTCOME.REFLECTED:\n          startElement.className += cssClass;\n          if (shot.outcome === OUTCOME.PROPOGATED) {\n            endElement.className += cssClass;\n          }\n          break;\n        case OUTCOME.MARBLE_REMOVED:\n          startElement.className = startElement.className.replace(cssClass, \"\");\n          break;\n      }\n    }\n\n    // enable/disable score game button\n    buttonScoreGame.disabled = !(allMarblesPlaced && !gameHasFinished);\n  };\n\n  View.prototype.validationHandlers = function() {\n    var inputGridSize = document.getElementById(\"inputGridSize\");\n    var inputMarbles = document.getElementById(\"inputMarbles\");\n\n    inputGridSize.addEventListener(\"focusout\", function(event) {\n      var gridSize = parseInt(event.currentTarget.value);\n      if (gridSize < 6) {\n        event.currentTarget.value = 6;\n      } else if (gridSize > 16) {\n        event.currentTarget.value = 16;\n      } else if (isNaN(gridSize)) {\n        event.currentTarget.value = 8;\n      }\n    });\n\n    inputMarbles.addEventListener(\"focusout\", function(event) {\n      var gridSize = parseInt(document.getElementById(\"inputGridSize\").value);\n      var numberOfMarbles = parseInt(event.currentTarget.value);\n      if (numberOfMarbles < 4) {\n        event.currentTarget.value = 4;\n      } else if (numberOfMarbles > 16) {\n        event.currentTarget.value = 16;\n      } else if (isNaN(numberOfMarbles)) {\n        event.currentTarget.value = gridSize - 4;\n      }\n    });\n  };\n\n  // Export to root (window in browser)\n  if (typeof define === \"function\" && define.amd) {\n    // requireJS\n    //define(VECTOR);\n  } else if (typeof exports === \"object\") {\n    // Node.js\n    module.exports.BlackBoxView = View;\n  } else {\n    // in the browser\n    root = root || {};\n    root.BLACKBOX = root.BLACKBOX || {};\n    root.BLACKBOX.View = View;\n  }\n})(this, this.BLACKBOX);\n","!(function(root) {\n  \"use strict\";\n\n  function shootAllRays(self) {\n    self.animateRays = self.view.renderAndAnimateAllRays(\n      self.model.turns,\n      self.model.gridSize\n    );\n  }\n\n  function BlackBoxController(model, view) {\n    var self = this;\n    this.animateRays = true;\n    this.model = model;\n    this.view = view;\n\n    this.view.bind(\"animateRays\", function() {\n      self.onClickAnimateRays();\n    });\n\n    this.view.bind(\"newGame\", function(gridSize = 8, numberOfMarbles = 4) {\n      self.onClickNewGame(gridSize, numberOfMarbles);\n    });\n\n    this.view.bind(\"scoreGame\", function() {\n      return self.onClickScoreGame();\n    });\n\n    this.view.bind(\"shootRay\", function(ray) {\n      return self.onClickShootRay(ray);\n    });\n  }\n\n  BlackBoxController.prototype.onClickAnimateRays = function() {\n    shootAllRays(this);\n  };\n\n  BlackBoxController.prototype.onClickNewGame = function(\n    gridSize = 8,\n    numberOfMarbles = 4\n  ) {\n    this.model.newGame(gridSize, numberOfMarbles);\n    this.renderViews();\n  };\n\n  BlackBoxController.prototype.onClickScoreGame = function() {\n    var score = this.model.scoreGame();\n    this.renderViews();\n    if (this.animateRays) {\n      setTimeout(shootAllRays, 3000, this);\n    }\n    return score;\n  };\n\n  BlackBoxController.prototype.onClickShootRay = function(ray) {\n    var outcome = this.model.shootRay(ray);\n    this.view.renderShot(\n      outcome,\n      this.model.gridSize,\n      this.model.gameHasFinished,\n      this.model.allMarblesPlaced()\n    );\n  };\n\n  BlackBoxController.prototype.renderViews = function() {\n    var model = this.model;\n    var gridCopy = JSON.parse(JSON.stringify(model.grid));\n    var guessesCopy = JSON.parse(JSON.stringify(model.guesses));\n    var marblesCopy = JSON.parse(JSON.stringify(model.marbles));\n    this.view.renderGridConsole(gridCopy);\n    this.view.renderGrid(\n      gridCopy,\n      model.gridSize,\n      model.gameHasFinished,\n      model.allMarblesPlaced(),\n      guessesCopy,\n      marblesCopy\n    );\n  };\n\n  // Export to root (window in browser)\n  if (typeof define === \"function\" && define.amd) {\n    // requireJS\n    //define(VECTOR);\n  } else if (typeof exports === \"object\") {\n    // Node.js\n    module.exports.BlackBoxController = BlackBoxController;\n  } else {\n    // in the browser\n    root = root || {};\n    root.BLACKBOX = root.BLACKBOX || {};\n    root.BLACKBOX.Controller = BlackBoxController;\n  }\n})(this);\n","// @codekit-prepend \"utility.js\";\n// @codekit-prepend \"vector.js\";\n// @codekit-prepend \"model.js\";\n// @codekit-prepend \"view.js\";\n// @codekit-prepend \"controller.js\";\n\n!(function(BLACKBOX) {\n  \"use strict\";\n\n  var model = new BLACKBOX.Model(8, 4, true);\n  var view = new BLACKBOX.View();\n  var controller = new BLACKBOX.Controller(model, view);\n  controller.renderViews();\n})(this.BLACKBOX);\n"]}